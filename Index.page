Title="Unraid Bluetooth Manager"
---
<?php

$btmName = 'UnraidBluetoothManager';

?>

<style>
    .btm-container {
        display: flex;
        flex-direction: column;
    }

        .btm-container .btm-row {
            display: flex;
            flex: 1;
        }

            .btm-container .btm-row .btm-column:first-of-type {
                margin-left: 0px;
            }

            .btm-container .btm-row .btm-column {
                flex: 1;
                padding: 10px;
                margin: 0px 5px;
            }

                .btm-container .btm-row .btm-column .btm-device-container {
                    display: none;
                    flex-direction: column;
                }

            .btm-container .btm-row .btm-spacer {
                flex: 0.5;
                border: none;
            }

        .btm-container .btm-title {
            font-weight: bold;
            font-size: 1.2em;
            display: block;
            margin-bottom: 10px;
        }

        .btm-container ul {
            list-style-type: none;
            padding: 0px;
            margin: 0px;
        }

        #message-panel {
            padding:12px;
            border: 1px solid rgba(0, 0, 0, 0.1);
            display: none;
        }

    li.device-container {
        display: flex;
        flex-direction: column;
        border: 1px solid rgba(0, 0, 0, 0.1);
        border-top: 0px;
        border-bottom: 0px;
    }

        li.device-container:first-of-type {
            border-top: 1px solid rgba(0, 0, 0, 0.1);
        }

    .device {
        text-align: left;
        font-size: 1.3rem;
        border-bottom: 1px solid rgba(0, 0, 0, 0.1);
        border-radius: 0px;
        padding: 1rem 1.25rem;
        display: flex;
        align-items: center;
        cursor: default;
        font-weight: bold;
    }

    .device-icon {
        width: 32px;
        text-align: center;
    }

        .device-icon > i:first-of-type {
            font-size: 26px;
        }

    .device-info {
        display: flex;
        flex-direction: column;
        width: 100%;
        padding: 0px 12px;
        flex: 1;
    }

    .device-name {
    }

    .device-mac {
        font-size: 1rem;
        font-weight: normal;
    }

    .device-icon {
        width: 30px;
        height: 30px;
    }

    .device-loader {
        width: 30px;
        height: 30px;
        display: none;
        justify-content: center;
        align-items: center;
    }

    .btm-loader {
        width: 22px;
        height: 22px;
        border: 3px solid rgba(28, 27, 27, 1.0);
        border-bottom-color: transparent;
        border-radius: 50%;
        display: inline-block;
        box-sizing: border-box;
        animation: rotation 1s linear infinite;
    }

    @keyframes rotation {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    .device-actions {
        display: none;
        flex-direction: column;
    }

        .device-actions button {
            margin: 0px;
            justify-content: center;
            zoom: 0.75;
        }

            .device-actions button.device-forget {
                display: none;
                margin-top: 6px;
            }


    .show {
        display: flex !important;
    }
</style>

<div class="btm-container">
<div class="btm-row">
<div class="btm-spacer"></div>
    <div class="btm-column">
    <div class="btm-row">
        <div class="btm-column">
            <ul id="message-panel"></ul>
        </div>
    </div>
    <div class="btm-row">
        <div class="btm-column">
            <div class="btm-device-container">
                <span class="btm-title">Connected Devices</span>
                <ul class="accordion" id="connected-devices"></ul>
            </div>
            <div class="btm-device-container">
                <span class="btm-title">Paired Devices</span>
                <ul class="accordion" id="paired-devices"></ul>
            </div>
            <div class="btm-device-container">
                <span class="btm-title">Available Devices</span>
                <ul class="accordion" id="available-devices"></ul>
            </div>
        </div>
    </div>
    </div>
    <div class="btm-spacer"></div>
    </div>
</div>

<script>
    let functions = '/plugins/<?= $btmName ?>/Functions.php'
    let macRegex = /^([0-9A-F]{2}[:-]){5}([0-9A-F]{2})$/;
    let pollTime = 1000;

    function performContextualAction(deviceId, action) {
        toggleDeviceLoader(deviceId, true);

        $.post(functions, { id: deviceId, method: action }, (response) => {
            logEvent(response);
            
            if(action === 'pair') {
                $.post(functions, { id: deviceId, method: 'trust' }, (response) => {
                    logEvent(response);

                    updateDeviceStateByAction(deviceId, action);
                });
            }
            else {
                updateDeviceStateByAction(deviceId, action);
            }
        });
    }

    function toggleDeviceLoader(deviceId, show) {
        let device = $(`li.device-container input[value="${deviceId}"]`).parent();
        let deviceLoader = device.find('.device-loader');
        let deviceActions = device.find('.device-actions');

        if (show) {
            deviceActions.removeClass('show');
            deviceLoader.addClass('show');
        }
        else {
            deviceLoader.removeClass('show');
            deviceActions.addClass('show');
        }
    }

    function detectDevices() {
        let availableDevices = [];

        $.get(functions, { method: 'devices' }, (response) => {
            const detectedDevices = JSON.parse(response);
            const physicalDevices = detectedDevices.filter(device => !macRegex.test(device.split(" ").slice(2).join(" "))).sort();

            let deviceCount = 0;

            if (physicalDevices.length === 0) {
                setTimeout(() => {
                    detectDevices();
                }, pollTime);
            }
            else {
                for (let i = 0; i < physicalDevices.length; i++) {
                    const device = physicalDevices[i].split(" ");
                    const deviceId = device[1];

                    $.post(functions, { id: deviceId, method: 'deviceinfo' }, (response) => {
                        const deviceInfo = JSON.parse(response.replaceAll("\\t", ""));

                        availableDevices.push({
                            id: deviceId,
                            name: device.slice(2).join(" "),
                            connected: searchDeviceInfo('Connected', deviceInfo),
                            paired: searchDeviceInfo('Paired', deviceInfo),
                            trusted: searchDeviceInfo('Trusted', deviceInfo),
                            icon: getIconClass(deviceInfo[4])
                        });

                        ++deviceCount;

                        if (deviceCount == physicalDevices.length) {
                            renderAvailableDevices(availableDevices);

                            setTimeout(() => {
                                detectDevices();
                            }, pollTime);
                        }
                    });
                }
            }
        });
    }

    function renderAvailableDevices(availableDevices) {
        const availableDeviceIds = availableDevices.map((device) => { return device.id; });
        const renderedDeviceIds = getRenderedDeviceIds();

        for (let i = 0; i < availableDevices.length; i++) {
            const availableDevice = availableDevices[i];
            const rendered = renderedDeviceIds.includes(availableDevice.id)

            if (!rendered) {
                const list = availableDevice.connected ? $('#connected-devices') : (availableDevice.paired || availableDevice.trusted) ? $('#paired-devices') : $('#available-devices');
                const action = getDeviceContextualAction(availableDevice.connected, availableDevice.paired, availableDevice.trusted);

                list.append(`<li class="device-container" data-connected="${availableDevice.connected}" data-paired="${availableDevice.paired}" data-trusted="${availableDevice.trusted}">
                        <input type="hidden" value="${availableDevice.id}" />
                        <div class="device">
                            <span class="device-icon">
                                <i class="${availableDevice.icon}"></i>
                            </span>
                            <span class="device-info">
                                <span class="device-name">${availableDevice.name}</span>
                                <span class="device-mac">${availableDevice.id}</span>
                            </span>
                            <span class="device-loader">
                                <span class="btm-loader"></span>
                            </span>
                            <span class="device-actions show">
                                ${getButtonTemplate(availableDevice.id, action)}
                            </span>
                        </div>
                    </li>`);

                list.parent().addClass('show');
            }
        }

        const unavailableDeviceIds = getRenderedDeviceIds().filter(id => !availableDeviceIds.includes(id));

        for (let i = 0; i < unavailableDeviceIds.length; i++) {
            const unavailableDeviceId = unavailableDeviceIds[i];
            const item = $(`li.device-container input[value="${unavailableDeviceId}"]`);
            const container = item.closest('.btm-device-container');

            item.parent().remove();

            if (container.find('li').length === 0) {
                container.removeClass('show');
            }
        }
    }

    function getDeviceContextualAction(connected, paired, trusted) {
        if (connected) {
            return 'disconnect';
        }
        else {
            if (paired && trusted) {
                return 'connect';
            }

            return 'pair';
        }
    }

    function getButtonTemplate(deviceId, action) {
        const forget = (action == "connect" || action == "disconnect");

        return `<button type="button" class="device-action" onclick="performContextualAction('${deviceId}', '${action}')">${action}</button>
            <button type="button" class="device-forget ${forget ? 'show' : ''}" onclick="performContextualAction('${deviceId}', 'forget')">Forget</button>`;
    }

    function updateDeviceStateByAction(deviceId, action, success) {
        let device = $(`li.device-container input[value="${deviceId}"]`).parent();
        let actions = device.find('.device-actions');
        let connected = false;
        let paired = false;
        let trusted = false;

        actions.html('')

        switch (action) {
           case 'pair':
                paired = success;
                break;
            case 'trust':
                paired = true;
                trusted = success;
                break;
            case 'connect':
            case 'disconnect':
                connected = success;
                paired = true;
                trusted = true;

                break;
            case 'forget':
                break;
        }

        device.data('connected', connected);
        device.data('paired', paired);
        device.data('trusted', trusted);

        let newAction = getDeviceContextualAction(connected, paired, trusted);

        actions.html(getButtonTemplate(deviceId, newAction));

        toggleDeviceLoader(deviceId, false);
    }

    function getRenderedDeviceIds() {
        return $('li.device-container input').get().map((input) => { return input.value; });
    }

    function searchDeviceInfo(value, deviceInfo) {
        for (var i = 0; i < deviceInfo.length; i++) {
            if (deviceInfo[i].match(value)) {
                return deviceInfo[i].split(': ')[1] == "yes";
            }
        }
        return -1;
    }

    function getIconClass(deviceInfoIcon) {
        let className = "fa fa-bluetooth";

        if (deviceInfoIcon.includes('Icon')) {
            const iconName = deviceInfoIcon.split(" ")[1];
            switch (iconName) {
                case "computer":
                    className = "fa fa-laptop";
                    break;
                case "phone":
                    className = "fa fa-mobile"
                    break;
                case "input-gaming":
                    className = "fa fa-gamepad"
                    break;
            }
        }

        return className;
    }

    function enableScan() {
        $.get(functions, { method: 'startscan' }, (response) => {
            logEvent(response);

            detectDevices();
        });
    }

    function disableScan() {
        $.get(functions, { method: 'stopscan' }, (response) => {
            logEvent(response);
        });
    }

    function logEvent(message) {
        let timestamp = new Date().toLocaleString().replace(',', '');

        $('#message-panel').append(`<li>
            <span class="timestamp">${timestamp}: </span>
            <span class="message">${message}</span>
        </li>`);

        if($('#message-panel li').length > 0) {
            $('#message-panel').addClass('show');
        }
    }

    $(function () {
        enableScan();

        window.onbeforeunload = () => {
            disableScan();
        }
    });
</script>
