Title="Unraid Bluetooth Manager"
---
<?php

$btmName = 'UnraidBluetoothManager';

?>

<style>
    .btm-container {
        display: flex;
        flex-direction: column;
    }

        .btm-container .btm-row {
            display: flex;
            flex: 1;
        }

            .btm-container .btm-row .btm-column:first-of-type {
                margin-left: 0px;
            }

            .btm-container .btm-row .btm-column {
                flex: 1;
                border: 1px solid rgb(232, 232, 232);
                padding: 10px;
                margin: 0px 5px;
            }

        .btm-container .btm-title {
            font-weight: bold;
            font-size: 1.2em;
            display: block;
            margin-bottom: 10px;
        }

        .btm-container ul {
            list-style-type: none;
            padding: 0px;
            margin: 0px;
        }

            .btm-container ul li {
                display: flex;
                flex-direction: column;
                border: 1px solid rgb(232, 232, 232);
                border-top: 0px;
                border-bottom: 0px;
            }

                .btm-container ul li:first-of-type {
                    border-top: 1px solid rgb(232, 232, 232);
                }

    button.accordion-button {
        text-align: left;
        font-size: 1.2rem;
        color: rgba(28, 27, 27, 1.0);
        background: none;
        border-bottom: 1px solid rgb(232, 232, 232);
        border-radius: 0px;
        margin: 0px;
        padding: 1rem 1.25rem;
        display: flex;
        align-items: center;
    }

        button.accordion-button:hover {
            background: rgb(232, 232, 232);
            color: rgba(28, 27, 27, 0.6);
        }

        button.accordion-button > i {
            flex: 1;
            text-align: end;
        }

    .accordion-details {
        display: none;
        border-bottom: 1px solid rgb(232, 232, 232);
        padding: 1rem 1.25rem;
    }
</style>

<div class="btm-container">
    <!--<div class="btm-row">
        <div class="btm-column">
            <button type="button" onclick="enableScan();">Start Scan</button>
        </div>
        <div class="btm-column">
            <button type="button" onclick="disableScan();">Stop Scan</button>
        </div>
        <div class="btm-column">
            <button type="button" onclick="detectDevices();">Get Devices</button>
        </div>
    </div>-->
    <div class="btm-row">
        <div class="btm-column">
            <ul id="message-panel"></ul>
        </div>
    </div>
    <div class="btm-row">
        <div class="btm-column">
            <span class="btm-title">Available Devices</span>
            <ul class="accordion" id="available-devices"></ul>
        </div>
    </div>
    <!--<div class="btm-row">
        <button id="disconnect" type="button" onclick="disconnect();" style="display:none;">Disconnect</button>
    </div>
    <div class="btm-row">
        <input type="text" id="connect-id" />
        <button id="disconnect" type="button" onclick="connect();">Connect</button>
    </div>-->
</div>

<script>
    let functions = '/plugins/<?= $btmName ?>/Functions.php'
    let macRegex = /^([0-9A-F]{2}[:-]){5}([0-9A-F]{2})$/;
    let pollTime = 1000;

    function connect() {
        let deviceId = $('#connect-id').val();
        let data = {
            id: deviceId,
            method: 'connect'
        };

        $('div.spinner').show();

        $.post(functions, data, (response) => {

            alert(`${response}`);

            $('div.spinner').hide();
        });
    }

    function disconnect() {
        let selectedDeviceId = $('input[type="radio"][name="paired"]:checked').val();
        let data = {
            id: selectedDeviceId,
            method: 'disconnect'
        };

        $('div.spinner').show();

        $.post(functions, data, (response) => {
            if (response != null) {
                $(`input[value="${response}"]`).parent().remove();
            }

            alert(`${response}`);

            $('div.spinner').hide();
        });
    }

    function detectDevices() {
        let availableDevices = [];

        $.get(functions, { method: 'devices' }, (response) => {
            const detectedDevices = JSON.parse(response);
            const physicalDevices = detectedDevices.filter(device => !macRegex.test(device.split(" ").slice(2).join(" "))).sort();

            let deviceCount = 0;

            for (let i = 0; i < physicalDevices.length; i++) {
                const device = physicalDevices[i].split(" ");
                const deviceId = device[1];

                $.post(functions, { id: deviceId, method: 'deviceinfo' }, (response) => {
                    const deviceInfo = JSON.parse(response.replaceAll("\\t", ""));

                    availableDevices.push({
                        id: deviceId,
                        name: device.slice(2).join(" "),
                        connected: searchDeviceInfo('Connected', deviceInfo),
                        paired: searchDeviceInfo('Paired', deviceInfo),
                        trusted: searchDeviceInfo('Trusted', deviceInfo)
                    });

                    ++deviceCount;

                    if (deviceCount == physicalDevices.length) {
                        renderAvailableDevices(availableDevices);

                        setTimeout(() => {
                            detectDevices();
                        }, pollTime);
                    }
                });
            }
        });
    }

    function renderAvailableDevices(availableDevices) {
        const availableDeviceIds = availableDevices.map((device) => { return device.id; });
        const renderedDeviceIds = getRenderedDeviceIds();

        for (let i = 0; i < availableDevices.length; i++) {
            const availableDevice = availableDevices[i];
            const rendered = renderedDeviceIds.includes(availableDevice.id)

            if (!rendered) {
                const list = $('#available-devices');

                list.append(`<li class="accordion-item">
                        <input type="hidden" name="paired" value="${availableDevice.id}" />
                        <button class="accordion-button" type="button" onclick="toggleDetails(event)">
                            ${availableDevice.name}
                            <i class="fa fa-chevron-down"></i>
                        </button>
                        <div class="accordion-details">
                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
                        </div>
                    </li>`);

                //if (availableDevice.paired) {


                //    //<li class="${availableDevice.connected ? 'connected' : 'disconnected'}" onclick="toggleDeviceSelection(event)">
                //    //    <span class="status"></span>

                //    //    <span class="name">${availableDevice.name} (${availableDevice.id})</span>
                //    //</li>
                //}
                //else {
                //    list.append(`<li onclick="toggleDeviceSelection(event)">
                //        <input type="radio" name="paired" value="${availableDevice.id}" />
                //        <span class="name">${availableDevice.name} (${availableDevice.id})</span>
                //    </li>`);
                //}
            }
        }

        const unavailableDeviceIds = getRenderedDeviceIds().filter(id => !availableDeviceIds.includes(id));

        for (let i = 0; i < unavailableDeviceIds.length; i++) {
            const unavailableDeviceId = unavailableDeviceIds[i];

            $(`#available-devices input[value="${unavailableDeviceId}"]`).parent().remove();
        }
    }

    function getRenderedDeviceIds() {
        return $('#available-devices li input').get().map((input) => { return input.value; });
    }

    function searchDeviceInfo(value, deviceInfo) {
        for (var i = 0; i < deviceInfo.length; i++) {
            if (deviceInfo[i].match(value)) {
                return deviceInfo[i].split(': ')[1] == "yes";
            }
        }
        return -1;
    }

    function enableScan() {
        $.get(functions, { method: 'startscan' }, (response) => {
            logEvent(response);

            detectDevices();
        });
    }

    function disableScan() {
        $.get(functions, { method: 'stopscan' }, (response) => {
            logEvent(response);
        });
    }

    function toggleDeviceSelection(event) {
        let button = $(event.currentTarget);
        let radio = button.find('input');

        if (radio.hasClass('checked')) {
            $('#disconnect').hide();

            radio
                .prop('checked', false)
                .removeClass('checked');
        }
        else {
            $('#disconnect').show();

            radio
                .prop('checked', true)
                .addClass('checked');
        }
    }

    function toggleDetails(event) {
        const button = $(event.currentTarget);
        const chevron = button.find('i');
        const details = button.next();

        if (details.hasClass('show')) {
            details
                .slideUp()
                .removeClass('show');
            chevron
                .addClass('fa-chevron-down')
                .removeClass('fa-chevron-up');
        }
        else {
            details
                .slideDown()
                .addClass('show');;
            chevron.addClass('fa-chevron-up').removeClass('fa-chevron-down');
        }
    }

    function logEvent(message) {
        let timestamp = new Date().toLocaleString().replace(',', '');

        $('#message-panel').append(`<li>
            <span class="timestamp">${timestamp}: </span>
            <span class="message">${message}</span>
        </li>`);
    }

    $(function () {
        enableScan();

        window.onbeforeunload = () => {
            disableScan();
        }
    });
</script>
