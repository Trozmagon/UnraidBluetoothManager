Title="Unraid Bluetooth Manager"
---
<?php

$btmName = 'UnraidBluetoothManager';

?>

<style>
    .btm-container {
        display: flex;
        flex-direction: column;
    }

        .btm-container .btm-row {
            display: flex;
            flex: 1;
        }

            .btm-container .btm-row .btm-column:first-of-type {
                margin-left: 0px;
            }

            .btm-container .btm-row .btm-column {
                flex: 1;
                border: 1px solid rgba(0, 0, 0, 0.1);
                padding: 10px;
                margin: 0px 5px;
            }

        .btm-container .btm-title {
            font-weight: bold;
            font-size: 1.2em;
            display: block;
            margin-bottom: 10px;
        }

        .btm-container ul {
            list-style-type: none;
            padding: 0px;
            margin: 0px;
        }

            .btm-container ul li {
                display: flex;
                flex-direction: column;
                border: 1px solid rgba(0, 0, 0, 0.1);
                border-top: 0px;
                border-bottom: 0px;
            }

                .btm-container ul li:first-of-type {
                    border-top: 1px solid rgba(0, 0, 0, 0.1);
                }

    button.accordion-button {
        text-align: left;
        font-size: 1.2rem;
        color: rgba(28, 27, 27, 1.0);
        background: none;
        border-bottom: 1px solid rgba(0, 0, 0, 0.1);
        border-radius: 0px;
        margin: 0px;
        padding: 1rem 1.25rem;
        display: flex;
        align-items: center;
    }

        button.accordion-button:hover {
            background: rgba(0, 0, 0, 0.1);
            color: rgba(28, 27, 27, 1.0);
        }

        button.accordion-button > i:first-of-type {
            font-size: 2rem;
            margin-right: 12px;
        }

        button.accordion-button > i:last-of-type {
            flex: 1;
            text-align: end;
        }

    .accordion-options {
        display: none;
        border-bottom: 1px solid rgba(0, 0, 0, 0.1);
        padding: 1rem 1.25rem;
    }

    span.device-row {
        display:flex;
        flex-direction:column;
    }

    span .device-name {
    }

    span.device-mac {
        font-size: 1rem;
        font-weight: normal;
    }
</style>

<div class="btm-container">
    <!--<div class="btm-row">
        <div class="btm-column">
            <button type="button" onclick="enableScan();">Start Scan</button>
        </div>
        <div class="btm-column">
            <button type="button" onclick="disableScan();">Stop Scan</button>
        </div>
        <div class="btm-column">
            <button type="button" onclick="detectDevices();">Get Devices</button>
        </div>
    </div>-->
    <div class="btm-row">
        <div class="btm-column">
            <ul id="message-panel"></ul>
        </div>
    </div>
    <div class="btm-row">
        <div class="btm-column"></div>
        <div class="btm-column">
            <span class="btm-title">Paired Devices</span>
            <ul class="accordion" id="paired-devices"></ul>
            <span class="btm-title">Available Devices</span>
            <ul class="accordion" id="available-devices"></ul>
        </div>
        <div class="btm-column"></div>
    </div>
    <!--<div class="btm-row">
        <button id="disconnect" type="button" onclick="disconnect();" style="display:none;">Disconnect</button>
    </div>
    <div class="btm-row">
        <input type="text" id="connect-id" />
        <button id="disconnect" type="button" onclick="connect();">Connect</button>
    </div>-->
</div>

<script>
    let functions = '/plugins/<?= $btmName ?>/Functions.php'
    let macRegex = /^([0-9A-F]{2}[:-]){5}([0-9A-F]{2})$/;
    let pollTime = 1000;

    function connect() {
        let deviceId = $('#connect-id').val();
        let data = {
            id: deviceId,
            method: 'connect'
        };

        $('div.spinner').show();

        $.post(functions, data, (response) => {

            alert(`${response}`);

            $('div.spinner').hide();
        });
    }

    function disconnect() {
        let selectedDeviceId = $('input[type="radio"][name="paired"]:checked').val();
        let data = {
            id: selectedDeviceId,
            method: 'disconnect'
        };

        $('div.spinner').show();

        $.post(functions, data, (response) => {
            if (response != null) {
                $(`input[value="${response}"]`).parent().remove();
            }

            alert(`${response}`);

            $('div.spinner').hide();
        });
    }

    function detectDevices() {
        let availableDevices = [];

        $.get(functions, { method: 'devices' }, (response) => {
            const detectedDevices = JSON.parse(response);
            const physicalDevices = detectedDevices.filter(device => !macRegex.test(device.split(" ").slice(2).join(" "))).sort();

            let deviceCount = 0;

            for (let i = 0; i < physicalDevices.length; i++) {
                const device = physicalDevices[i].split(" ");
                const deviceId = device[1];

                $.post(functions, { id: deviceId, method: 'deviceinfo' }, (response) => {
                    const deviceInfo = JSON.parse(response.replaceAll("\\t", ""));

                    availableDevices.push({
                        id: deviceId,
                        name: device.slice(2).join(" "),
                        connected: searchDeviceInfo('Connected', deviceInfo),
                        paired: searchDeviceInfo('Paired', deviceInfo),
                        trusted: searchDeviceInfo('Trusted', deviceInfo),
                        icon: getIconClass(deviceInfo[4])
                    });

                    ++deviceCount;

                    if (deviceCount == physicalDevices.length) {
                        renderAvailableDevices(availableDevices);

                        setTimeout(() => {
                            detectDevices();
                        }, pollTime);
                    }
                });
            }
        });
    }

    function renderAvailableDevices(availableDevices) {
        const availableDeviceIds = availableDevices.map((device) => { return device.id; });
        const renderedDeviceIds = getRenderedDeviceIds();

        for (let i = 0; i < availableDevices.length; i++) {
            const availableDevice = availableDevices[i];
            const rendered = renderedDeviceIds.includes(availableDevice.id)

            if (!rendered) {
                const list = $('#available-devices');

                list.append(`<li class="accordion-item">
                        <input type="hidden" name="paired" value="${availableDevice.id}" />
                        <button class="accordion-button" type="button" onclick="toggleDetails(event)">
                            <i class="${availableDevice.icon}"></i>
                            <span class="device-row">
                                <span class="device-name">${availableDevice.name}</span>
                                <span class="device-mac">${availableDevice.id}</span>
                            </span>
                            <i class="fa fa-chevron-down"></i>
                        </button>
                        <div class="accordion-options">

                        </div>
                    </li>`);

                //if (availableDevice.paired) {


                //    //<li class="${availableDevice.connected ? 'connected' : 'disconnected'}" onclick="toggleDeviceSelection(event)">
                //    //    <span class="status"></span>

                //    //    <span class="name">${availableDevice.name} (${availableDevice.id})</span>
                //    //</li>
                //}
                //else {
                //    list.append(`<li onclick="toggleDeviceSelection(event)">
                //        <input type="radio" name="paired" value="${availableDevice.id}" />
                //        <span class="name">${availableDevice.name} (${availableDevice.id})</span>
                //    </li>`);
                //}
            }
        }

        const unavailableDeviceIds = getRenderedDeviceIds().filter(id => !availableDeviceIds.includes(id));

        for (let i = 0; i < unavailableDeviceIds.length; i++) {
            const unavailableDeviceId = unavailableDeviceIds[i];

            $(`#available-devices input[value="${unavailableDeviceId}"]`).parent().remove();
        }
    }

    function getRenderedDeviceIds() {
        return $('#available-devices li input').get().map((input) => { return input.value; });
    }

    function searchDeviceInfo(value, deviceInfo) {
        for (var i = 0; i < deviceInfo.length; i++) {
            if (deviceInfo[i].match(value)) {
                return deviceInfo[i].split(': ')[1] == "yes";
            }
        }
        return -1;
    }

    function getIconClass(deviceInfoIcon) {
        const iconName = deviceInfoIcon.split(" ")[1];
        let className = "";

        switch (iconName) {
            default:
                className = "fa fa-bluetooth";
                break;
            case "computer":
                className = "fa fa-desktop";
                break;
            case "audio-card":
                className = "fa fa-tv"
                break;
            case "phone":
                className = "fa fa-mobile"
                break;
        }

        return className;
    }

    function enableScan() {
        $.get(functions, { method: 'startscan' }, (response) => {
            logEvent(response);

            detectDevices();
        });
    }

    function disableScan() {
        $.get(functions, { method: 'stopscan' }, (response) => {
            logEvent(response);
        });
    }

    function toggleDeviceSelection(event) {
        let button = $(event.currentTarget);
        let radio = button.find('input');

        if (radio.hasClass('checked')) {
            $('#disconnect').hide();

            radio
                .prop('checked', false)
                .removeClass('checked');
        }
        else {
            $('#disconnect').show();

            radio
                .prop('checked', true)
                .addClass('checked');
        }
    }

    function toggleDetails(event) {
        const button = $(event.currentTarget);
        const chevron = button.find('i:last-of-type');
        const details = button.next();

        if (details.hasClass('show')) {
            details
                .slideUp()
                .removeClass('show');
            chevron
                .addClass('fa-chevron-down')
                .removeClass('fa-chevron-up');
        }
        else {
            details
                .slideDown()
                .addClass('show');;
            chevron.addClass('fa-chevron-up').removeClass('fa-chevron-down');
        }
    }

    function logEvent(message) {
        let timestamp = new Date().toLocaleString().replace(',', '');

        $('#message-panel').append(`<li>
            <span class="timestamp">${timestamp}: </span>
            <span class="message">${message}</span>
        </li>`);
    }

    $(function () {
        enableScan();

        window.onbeforeunload = () => {
            disableScan();
        }
    });
</script>
